import asyncio
import base64
import json
import os
import time
import re
import logging
import traceback
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from playwright.async_api import async_playwright, expect
import requests
import xlwings as xw
import sys
import colorama
from colorama import Fore, Back, Style

# Inicializar colorama para funcionar em qualquer plataforma
colorama.init()

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes globais
MODO_TESTE = False # Modo teste-> true= captcha manual, false= autom√°tico
MODO_HEADLESS = True # Modo headless-> true= segundo plano, false= vis√≠vel
EXECUTABLE_PATH = "C:/Program Files/Google/Chrome/Application/chrome.exe"
PLANILHA_PATH = "G:/PMA/LISTA EMPRESAS - NETO CONTABILIDADE 2025.xlsm"
ISENCOES_PATH = "G:/PMA/SCRIPTS/Taxas/isen√ß√µes.json"
LOG_PATH = "G:/PMA/SCRIPTS/taxas/logs/consulta_taxas_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
ERROR_LOG_PATH = "G:/PMA/SCRIPTS/taxas/logs/erros_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
MAX_TENTATIVAS = 2  # Quantidade de vezes que um CNPJ pode ser reprocessado em caso de erro

# Configura√ß√£o de logging personalizada
os.makedirs("logs", exist_ok=True)

# Filtro personalizado para mensagens de terminal
class TerminalLogFilter(logging.Filter):
    def filter(self, record):
        # Permitir mensagens de n√≠vel INFO ou maior para terminal
        # Filtrar mensagens DEBUG muito detalhadas do terminal
        if record.levelno >= logging.INFO:
            return True
        return False

# Formatador de logs para arquivo (detalhado)
file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# Formatador para terminal (mais conciso e colorido)
class ColoredFormatter(logging.Formatter):
    def format(self, record):
        # Formato base sem timestamp para o terminal
        self._style._fmt = '%(message)s'
        
        # Adicionar cores baseadas no n√≠vel de log
        if record.levelno >= logging.ERROR:
            prefix = f"{Fore.RED}[‚úò] ERRO: "
            suffix = Style.RESET_ALL
        elif record.levelno >= logging.WARNING:
            prefix = f"{Fore.YELLOW}[‚ö†] AVISO: "
            suffix = Style.RESET_ALL
        elif record.levelno >= logging.INFO:
            # Adicionar formata√ß√£o espec√≠fica baseada em marcadores no log
            if "[PROGRESSO]" in record.msg:
                prefix = f"{Fore.CYAN}"
                suffix = Style.RESET_ALL
                record.msg = record.msg.replace("[PROGRESSO]", "")
            elif "[SUCESSO]" in record.msg:
                prefix = f"{Fore.GREEN}[‚úì] "
                suffix = Style.RESET_ALL
                record.msg = record.msg.replace("[SUCESSO]", "")
            elif "[LOGIN]" in record.msg:
                prefix = f"{Fore.MAGENTA}[üîë] "
                suffix = Style.RESET_ALL
                record.msg = record.msg.replace("[LOGIN]", "")
            elif "[CONFIG]" in record.msg:
                prefix = f"{Fore.BLUE}[‚öô] "
                suffix = Style.RESET_ALL
                record.msg = record.msg.replace("[CONFIG]", "")
            elif "[INICIO]" in record.msg or "[FIM]" in record.msg:
                prefix = f"{Fore.CYAN}{'=' * 50}\n"
                suffix = f"\n{'=' * 50}{Style.RESET_ALL}"
                record.msg = record.msg.replace("[INICIO]", "").replace("[FIM]", "")
            else:
                prefix = ""
                suffix = Style.RESET_ALL
        else:
            prefix = ""
            suffix = ""
        
        # Formatar com prefixo e sufixo coloridos
        formatted_message = super().format(record)
        return f"{prefix}{formatted_message}{suffix}"

# Configurar handlers
# 1. Handler para arquivo de log principal
file_handler = logging.FileHandler(LOG_PATH, encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(file_formatter)

# 2. Handler para arquivo de erros
error_handler = logging.FileHandler(ERROR_LOG_PATH, encoding='utf-8')
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(file_formatter)

# 3. Handler para console com formata√ß√£o colorida
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(ColoredFormatter())
console_handler.addFilter(TerminalLogFilter())

# Configurar o logger principal
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(error_handler)
logger.addHandler(console_handler)

# Mapeamento de nomes de taxas para colunas da planilha
MAPEAMENTO_TAXAS = {
    "Taxa de Fiscaliza√ß√£o de Funcionamento": "TAXA FUNCIONAMENTO",
    "Taxa de Fiscaliza√ß√£o de An√∫ncios": "TAXA PUBLICIDADE",
    "ISS": "ISS",
    "Taxa de Vigil√¢ncia Sanit√°ria": "TAXA VIG SANIT√ÅRIA",
    "Taxa de Localiza√ß√£o e Instala√ß√£o": "TAXA LOCALIZ INSTALA√á√ÉO",
    "Pre√ßo P√∫blico Pela Ocupa√ß√£o e Uso de √Årea P√∫blica": "TAXA OCUP √ÅREA P√öBLICA"
}

# √çndices das colunas na planilha (base 0)
INDICES_COLUNAS = {
    "EMPRESA": 0,  # Coluna A
    "CNPJ": 1,     # Coluna B
    "TAXA FUNCIONAMENTO": 2,  # Coluna C
    "TAXA PUBLICIDADE": 3,    # Coluna D
    "ISS": 4,                # Coluna E
    "TAXA VIG SANIT√ÅRIA": 5,  # Coluna F
    "TAXA LOCALIZ INSTALA√á√ÉO": 6,  # Coluna G
    "TAXA OCUP √ÅREA P√öBLICA": 7    # Coluna H
}

def carregar_variaveis_ambiente():
    """Carrega vari√°veis de ambiente do arquivo .env"""
    usuario = os.getenv("USUARIO")
    senha = os.getenv("SENHA")
    api_key = os.getenv("API_KEY_2CAPTCHA")
    if not usuario or not senha or not api_key:
        logger.error("Verifique se USUARIO, SENHA e API_KEY_2CAPTCHA est√£o corretamente definidos no .env")
        raise ValueError("ERRO: Verifique se USUARIO, SENHA e API_KEY_2CAPTCHA est√£o corretamente definidos no .env")
    return usuario, senha, api_key

def carregar_isencoes():
    """Carrega o arquivo JSON de isen√ß√µes de taxas"""
    try:
        with open(ISENCOES_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.warning(f"Erro ao carregar arquivo de isen√ß√µes: {e}")
        return {}

def carregar_cnpjs_da_planilha():
    """Carrega lista de CNPJs da aba 'CNPJs' da planilha"""
    try:
        logger.info("[CONFIG] Carregando CNPJs da planilha...")
        with xw.App(visible=False) as app:
            wb = app.books.open(PLANILHA_PATH)
            sheet = wb.sheets["CNPJs"]
            valores = sheet.range("B2").expand("down").value
            if not isinstance(valores, list):
                valores = [valores]
            cnpjs = []
            for val in valores:
                if val:
                    cnpj = str(val).strip()
                    if not re.match(r'\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}', cnpj):
                        cnpj = re.sub(r'[^\d]', '', cnpj)
                        if len(cnpj) == 14:
                            cnpj = f"{cnpj[:2]}.{cnpj[2:5]}.{cnpj[5:8]}/{cnpj[8:12]}-{cnpj[12:]}"
                    cnpjs.append(cnpj)
            wb.close()
        logger.info(f"[SUCESSO] {len(cnpjs)} CNPJs carregados da planilha")
        return cnpjs
    except Exception as e:
        logger.error(f"Erro ao carregar CNPJs da planilha: {e}")
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(f"\n\nErro ao carregar CNPJs da planilha:\n{traceback.format_exc()}")
        raise

def resolver_captcha_2captcha(image_base64, api_key):
    """Resolve captcha usando o servi√ßo 2CAPTCHA"""
    logger.info("[LOGIN] Enviando captcha para resolu√ß√£o com 2CAPTCHA")
    url = "http://2captcha.com/in.php"
    data = {'method': 'base64', 'key': api_key, 'body': image_base64, 'json': 1}
    response = requests.post(url, data=data).json()
    if response.get("status") != 1:
        logger.error(f"Erro ao enviar captcha: {response}")
        raise Exception("Erro ao enviar captcha")
    
    captcha_id = response["request"]
    logger.info(f"[LOGIN] Captcha enviado com ID: {captcha_id}. Aguardando resolu√ß√£o...")
    
    for attempt in range(1, 21):
        time.sleep(5)
        res = requests.get(f"http://2captcha.com/res.php?key={api_key}&action=get&id={captcha_id}&json=1").json()
        if res.get("status") == 1:
            logger.info(f"[SUCESSO] Captcha resolvido")
            return res["request"]
        # Log detalhado apenas para arquivo, n√£o para terminal
        logging.getLogger().debug(f"Tentativa {attempt}/20: {res}")
    
    logger.error("Timeout na resolu√ß√£o do captcha")
    raise Exception("Timeout na resolu√ß√£o do captcha")

def interpretar_parcelas(texto):
    """Interpreta o formato de parcelas e retorna o status conforme padr√£o"""
    texto = texto.strip().lower()
    if texto in ("√∫nica", "0", "0,1"):
        return "Em Aberto"
    if "a" in texto:
        partes = texto.split("a", 1)
        if len(partes) < 2 or not partes[0].isdigit() or not partes[1].isdigit():
            return "Em Aberto"
        ini, fim = map(int, partes)
        abertas = fim - ini + 1
        total = fim
    elif "," in texto:
        parcelas = [int(p.strip()) for p in texto.split(",") if p.strip().isdigit()]
        if not parcelas:
            return "Em Aberto"
        abertas = len(parcelas)
        total = max(parcelas)
    elif texto.isdigit():
        abertas = 1
        total = int(texto)
    else:
        return "Em Aberto"
    pagas = total - abertas
    return f"{pagas}/{total}"

def formatar_status_para_planilha(taxas):
    """Formata o status das taxas de acordo com o padr√£o da planilha"""
    # Agrupar taxas por tipo
    taxas_por_tipo = {}
    for taxa in taxas:
        nome_taxa = taxa["nome"]
        resultado = taxa["resultado"]
        exercicio = taxa["exercicio"]
        
        # Buscar o tipo correto da taxa baseado no nome
        tipo_taxa = None
        for key, value in MAPEAMENTO_TAXAS.items():
            if key in nome_taxa:
                tipo_taxa = value
                break
        
        if not tipo_taxa:
            logging.getLogger().debug(f"Taxa n√£o mapeada: {nome_taxa}")
            continue
        
        if tipo_taxa not in taxas_por_tipo:
            taxas_por_tipo[tipo_taxa] = []
        
        taxas_por_tipo[tipo_taxa].append({
            "exercicio": exercicio,
            "resultado": resultado
        })
    
    # Formatar o status final para cada tipo de taxa
    resultado_final = {}
    for tipo_taxa, detalhes in taxas_por_tipo.items():
        if len(detalhes) == 1:
            # Caso √∫nico: usar diretamente o resultado
            resultado_final[tipo_taxa] = detalhes[0]["resultado"]
        else:
            # M√∫ltiplos exerc√≠cios: verificar se s√£o consecutivos
            exercicios = [int(d["exercicio"]) for d in detalhes if d["exercicio"] and d["exercicio"].isdigit()]
            if not exercicios:
                resultado_final[tipo_taxa] = "Em Aberto"
                continue
                
            exercicios.sort()
            if len(exercicios) > 1 and all(exercicios[i] + 1 == exercicios[i+1] for i in range(len(exercicios)-1)):
                # Exerc√≠cios consecutivos
                resultado_final[tipo_taxa] = f"{exercicios[0]} at√© {exercicios[-1]} em aberto"
            else:
                # Exerc√≠cios n√£o consecutivos
                resultado_final[tipo_taxa] = "V√°rios exerc. em aberto"
    
    # CORRE√á√ÉO: Adicionar "Pago" para os tipos de taxa n√£o encontrados
    # Isso garante que taxas sem d√©bitos sejam marcadas como pagas
    for tipo_taxa in MAPEAMENTO_TAXAS.values():
        if tipo_taxa not in resultado_final:
            resultado_final[tipo_taxa] = "Pago"
    
    return resultado_final

async def realizar_login(page, usuario, senha, api_key):
    """Realiza login no portal do cidad√£o"""
    logger.info("[LOGIN] Acessando portal do cidad√£o...")
    await page.goto("https://portaldocidadao.anapolis.go.gov.br/")
    await page.fill('input[id="101817"]', usuario)
    await page.fill('input[id="101818"]', senha)
    
    if MODO_TESTE:
        logger.info(f"{Fore.YELLOW}[LOGIN] MODO TESTE ATIVADO: Resolva o CAPTCHA manualmente no navegador.{Style.RESET_ALL}")
        input(f"{Fore.YELLOW}‚úÖ Quando terminar, clique em 'Acessar' no site e depois aperte ENTER aqui para continuar...{Style.RESET_ALL}")
    else:
        captcha_bytes = await page.locator("img.step-img").screenshot()
        captcha_img = base64.b64encode(captcha_bytes).decode("utf-8")
        logging.getLogger().debug(f"Captcha Image Base64: {captcha_img[:30]}...")
        resposta = resolver_captcha_2captcha(captcha_img, api_key)
        logger.info(f"[LOGIN] Preenchendo captcha com resposta: {resposta}")
        await page.fill('input[id="101819"]', resposta)
        await page.click('input[id="101822"]')
    
    logger.info("[SUCESSO] Login realizado com sucesso")

async def consultar_cnpj(page, cnpj, idx, total):
    """Consulta um CNPJ espec√≠fico e extrai seus d√©bitos"""
    try:
        # Barra de progresso
        porcentagem = (idx / total) * 100
        barra = f"[{Fore.GREEN}{'‚ñà' * int(porcentagem/5)}{Fore.WHITE}{'‚ñë' * (20 - int(porcentagem/5))}{Style.RESET_ALL}] {porcentagem:.1f}% ({idx}/{total})"
        logger.info(f"[PROGRESSO] {barra}")
        logger.info(f"Consultando CNPJ {cnpj}")
        
        # Navegar para consulta
        await page.hover("a.pure-menu-link:text('Consultar')")
        await page.click("a[data-navigation='20206']")
        
        # Buscar CNPJ
        await page.wait_for_selector("input.tablesorter-filter[data-column='4']", timeout=10000)
        await page.fill("input.tablesorter-filter[data-column='4']", cnpj)
        await page.keyboard.press("Enter")
        
        await page.wait_for_selector("#grid67248")
        xpath = f"(//tr[td//div[contains(text(), '{cnpj}')]]//input[@type='radio'])[1]"
        checkbox = page.locator(xpath)
        
        try:
            await expect(checkbox).to_be_visible(timeout=10000)
        except Exception:
            logger.warning(f"Cliente n√£o encontrado para o CNPJ {cnpj}")
            return []
            
        await checkbox.check()
        
        await page.wait_for_selector('input[id="67252"]', timeout=10000)
        await page.click('input[id="67252"]')
        await page.wait_for_timeout(3000)
        
        if await page.locator("text=A inscri√ß√£o informada n√£o possui nenhum d√©bito no momento").is_visible():
            logger.info(f"[SUCESSO] Cliente {cnpj} est√° regular - sem d√©bitos")
            return []
            
        return await extrair_taxas_detalhadas(page, cnpj)
    except Exception as e:
        logger.error(f"Erro ao consultar CNPJ {cnpj}: {e}")
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(f"\n\nErro ao consultar CNPJ {cnpj}:\n{traceback.format_exc()}")
        raise

async def extrair_taxas_detalhadas(page, cnpj):
    """Extrai detalhes das taxas clicando nas engrenagens"""
    taxas_total = []
    try:
        engrenagens = await page.locator("button.nfe-action").all()
        
        if engrenagens:
            logger.info(f"Processando {len(engrenagens)} d√©bitos encontrados")
        
        for idx, engrenagem in enumerate(engrenagens):
            # Log mais compacto para o terminal
            logger.debug(f"Clicando em 'Detalhar' ({idx + 1}/{len(engrenagens)})...")
            
            # Clicar na engrenagem e aguardar o menu aparecer
            await engrenagem.click()
            await page.wait_for_timeout(1000)  # Aguarda 1 segundo para o menu aparecer
            
            try:
                # Primeiro tenta pelo seletor espec√≠fico
                detalhar = page.locator(f".fg-menu-container a[data-op='DETALHA_DIVIDA'][data-key='{idx + 1}']")
                if await detalhar.count() > 0:
                    await detalhar.first.click()
                else:
                    # Se n√£o encontrar, tenta um seletor mais gen√©rico
                    detalhar_alt = page.locator(".fg-menu-container a[data-op='DETALHA_DIVIDA']")
                    if await detalhar_alt.count() > 0:
                        await detalhar_alt.first.click()
                    else:
                        # √öltima alternativa - busca por texto
                        detalhar_texto = page.locator(".fg-menu-container a:has-text('Detalhar')")
                        await detalhar_texto.first.click()
                
                # Espera base para carregamento
                await page.wait_for_timeout(1500)
                
                # Espera pela tabela ser carregada
                await page.wait_for_selector("table.jqgrid tbody tr.jqgrow", state="visible", timeout=20000)
                
                # Extrai as taxas
                taxas = await extrair_taxas(page)
                taxas_total.extend(taxas)
                
            except Exception as e:
                logger.error(f"Erro ao processar engrenagem {idx + 1}: {e}")
                continue
                
    except Exception as e:
        logger.error(f"Erro ao extrair taxas detalhadas para {cnpj}: {e}")
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(f"\n\nErro ao extrair taxas detalhadas para {cnpj}:\n{traceback.format_exc()}")
    
    return taxas_total

async def extrair_taxas(page):
    """Extrai informa√ß√µes das taxas da tabela exibida"""
    await page.wait_for_selector("table.jqgrid tbody tr.jqgrow", timeout=10000)
    linhas = await page.locator("table.jqgrid tbody tr").all()
    exercicio_atual = None
    taxas_resultado = []
    
    for linha in linhas:
        classes = await linha.get_attribute("class") or ""
        if "jqgroup" in classes:
            texto = await linha.inner_text()
            if "Exerc√≠cio:" in texto:
                exercicio_atual = texto.split("Exerc√≠cio:")[-1].strip()
            continue
        
        if "jqgrow" not in classes:
            continue
            
        colunas = await linha.locator("td").all_text_contents()
        if len(colunas) < 6:
            continue
            
        nome_taxa = colunas[3].strip()
        parcelas = colunas[5].strip()
        
        # Ignora linhas com valores monet√°rios ou sem nome de taxa ou sem parcelas
        if not nome_taxa or nome_taxa.startswith("R$") or not parcelas:
            continue
            
        status = interpretar_parcelas(parcelas)
        resultado = status if status != "Em Aberto" else f"{exercicio_atual} em aberto" if exercicio_atual != "2025" else "Em Aberto"
        
        taxas_resultado.append({
            "exercicio": exercicio_atual,
            "nome": nome_taxa,
            "parcelas": parcelas,
            "resultado": resultado
        })
    
    # Reduzir log para tornar a sa√≠da mais limpa
    if taxas_resultado:
        tipos_taxa = set(taxa["nome"] for taxa in taxas_resultado)
        logger.info(f"Encontradas {len(taxas_resultado)} taxas de {len(tipos_taxa)} tipos diferentes")
        # Usar DEBUG para n√£o poluir o console, mas manter os detalhes no arquivo de log
        for taxa in taxas_resultado:
            logging.getLogger().debug(f" ‚Üí [{taxa['exercicio']}] {taxa['nome']} ‚Äì {taxa['resultado']}")
    else:
        logger.info("Nenhuma taxa encontrada na tabela")
    
    return taxas_resultado

def atualizar_planilha(cnpj, taxas_formatadas, isencoes):
    """Atualiza a planilha com os dados extra√≠dos"""
    try:
        # Carregar planilha preservando macros
        with xw.App(visible=False) as app:
            app.display_alerts = False
            wb = app.books.open(PLANILHA_PATH)
            sheet = wb.sheets["TAXAS"]

            # Procurar linha do CNPJ
            valores = sheet.range("B2").expand("down").value
            if not isinstance(valores, list):
                valores = [valores]
            linha_encontrada = None
            cnpj_digits = re.sub(r'[^\d]', '', cnpj)
            for idx, val in enumerate(valores, start=2):
                cell_digits = re.sub(r'[^\d]', '', str(val or ""))
                if cell_digits == cnpj_digits:
                    linha_encontrada = idx
                    break

            if not linha_encontrada:
                logger.warning(f"CNPJ {cnpj} n√£o encontrado na aba TAXAS da planilha")
                wb.close()
                return False

            # Verificar isen√ß√µes para este CNPJ
            cnpj_sem_formatacao = re.sub(r'[^\d]', '', cnpj)
            isencoes_cnpj = isencoes.get(cnpj_sem_formatacao, [])

            # Atualizar cada coluna de taxa
            for tipo_taxa, status in taxas_formatadas.items():
                if tipo_taxa not in INDICES_COLUNAS:
                    logging.getLogger().debug(f"Tipo de taxa n√£o mapeado na planilha: {tipo_taxa}")
                    continue

                col_idx = INDICES_COLUNAS[tipo_taxa] + 1  # xlwings usa base 1
                cell = sheet.range(linha_encontrada, col_idx)

                # Verificar se a c√©lula tem um asterisco (empresa isenta)
                if cell.value == "*" or any(taxa_map in isencoes_cnpj for taxa_map in [tipo_taxa]):
                    logging.getLogger().debug(
                        f"C√©lula com '*' encontrada para {cnpj} na coluna {tipo_taxa}. Mantendo isen√ß√£o.")
                    continue

                # Se houver status, atualizar a c√©lula
                cell.value = status

            # Salvar planilha preservando formata√ß√£o e macros
            wb.save()
            wb.close()
            return True
    except Exception as e:
        logger.error(f"Erro ao atualizar planilha para CNPJ {cnpj}: {e}")
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(f"\n\nErro ao atualizar planilha para CNPJ {cnpj}:\n{traceback.format_exc()}")
        return False

async def processar_cnpjs(page, cnpjs, isencoes):
    """Processa a lista de CNPJs, realizando consultas e atualizando a planilha"""
    total = len(cnpjs)
    sucessos = 0
    falhas = 0
    relogins = 0
    
    logger.info(f"Iniciando processamento de {total} CNPJs")
    
    for idx, cnpj in enumerate(cnpjs, start=1):
        tentativa = 1
        while tentativa <= MAX_TENTATIVAS:
            try:
                # Tentar processar o CNPJ atual
                taxas = await consultar_cnpj(page, cnpj, idx, total)
                status_formatados = formatar_status_para_planilha(taxas)

                # Atualizar a planilha com as informa√ß√µes obtidas
                if atualizar_planilha(cnpj, status_formatados, isencoes):
                    logger.info(f"[SUCESSO] CNPJ {cnpj} processado e planilha atualizada")
                    sucessos += 1
                else:
                    logger.warning(f"CNPJ {cnpj} ‚Äì Falha ao atualizar planilha")
                    falhas += 1
                break

            except Exception as e:
                erro_msg = str(e).split('\n')[0]
                logger.error(f"CNPJ {cnpj} ‚Äì Falha: {erro_msg}")
                falhas += 1

                # Tentar relogin apenas uma vez em caso de timeout ou erro similar
                if tentativa < MAX_TENTATIVAS and ("timeout" in erro_msg.lower() or "TimeoutError" in str(e)):
                    logger.warning("Poss√≠vel timeout ou erro de sess√£o. Tentando relogin e nova tentativa...")
                    try:
                        await page.goto("https://portaldocidadao.anapolis.go.gov.br/")
                        usuario, senha, api_key = carregar_variaveis_ambiente()
                        await realizar_login(page, usuario, senha, api_key)
                        relogins += 1
                        logger.info(f"[SUCESSO] Relogin #{relogins} realizado com sucesso")
                        tentativa += 1
                        continue
                    except Exception as login_err:
                        erro_login = str(login_err).split('\n')[0]
                        logger.error(f"Falha ao fazer relogin: {erro_login}")
                        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
                            f.write(f"\n\nFalha ao fazer relogin:\n{traceback.format_exc()}")
                break
    
    # Resumo final com estat√≠sticas
    taxa_sucesso = (sucessos / total) * 100 if total > 0 else 0
    logger.info(f"""
{Fore.CYAN}{'=' * 70}{Style.RESET_ALL}
{Fore.GREEN}‚úÖ PROCESSAMENTO FINALIZADO{Style.RESET_ALL}

{Fore.CYAN}üìä RESUMO ESTAT√çSTICO:{Style.RESET_ALL}
  ‚Ä¢ Total de CNPJs processados: {total}
  ‚Ä¢ Processados com sucesso: {sucessos} ({taxa_sucesso:.1f}%)
  ‚Ä¢ Falhas: {falhas}
  ‚Ä¢ Relogins necess√°rios: {relogins}
{Fore.CYAN}{'=' * 70}{Style.RESET_ALL}
""")
    
    return sucessos, falhas, relogins

async def main():
    # Carregar vari√°veis e dados necess√°rios
    logger.info("[INICIO] CONSULTA DE TAXAS - NETO CONTABILIDADE")
    
    try:
        USUARIO, SENHA, API_KEY = carregar_variaveis_ambiente()
        cnpjs = carregar_cnpjs_da_planilha()
        isencoes = carregar_isencoes()
        
        logger.info("[CONFIG] Configura√ß√µes carregadas")
        logger.debug(f"USUARIO: {USUARIO}")
        logger.debug(f"SENHA: {'****' if SENHA else None}")
        logger.debug(f"API_KEY: {API_KEY[:4] + '...' if API_KEY else None}")
        logger.info(f"{Fore.CYAN}‚Ä¢ CNPJs a consultar: {len(cnpjs)}{Style.RESET_ALL}")
        logger.info(f"{Fore.CYAN}‚Ä¢ Empresas com isen√ß√µes: {len(isencoes)}{Style.RESET_ALL}")
        logger.info(f"{Fore.BLUE}‚Ä¢ Modo teste: {'ATIVADO' if MODO_TESTE else 'DESATIVADO'}{Style.RESET_ALL}")
        
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=MODO_HEADLESS, executable_path=EXECUTABLE_PATH)
            context = await browser.new_context(ignore_https_errors=True)
            page = await context.new_page()
            
            logger.info("[LOGIN] Iniciando processo de autentica√ß√£o...")
            await realizar_login(page, USUARIO, SENHA, API_KEY)
            
            logger.info("[PROGRESSO] Iniciando consultas dos CNPJs")
            await processar_cnpjs(page, cnpjs, isencoes)
            
            logger.info("Finalizando navega√ß√£o...")
            await context.close()
            await browser.close()
        
        logger.info("[FIM] SCRIPT FINALIZADO COM SUCESSO")
        
    except Exception as e:
        erro_msg = str(e).split('\n')[0]
        logger.error(f"Erro cr√≠tico durante a execu√ß√£o: {erro_msg}")
        with open(ERROR_LOG_PATH, 'a', encoding='utf-8') as f:
            f.write(f"\n\nErro cr√≠tico durante a execu√ß√£o:\n{traceback.format_exc()}")
        logger.error("[FIM] SCRIPT FINALIZADO COM ERROS")

if __name__ == "__main__":
    try:
        # Imprimir cabe√ßalho colorido
        print(f"""
{Fore.CYAN}{'=' * 70}
{Fore.CYAN}‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ‚ñë‚ñà ‚ñà‚ñÄ ‚ñà‚ñë‚ñà ‚ñà‚ñë‚ñë ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñà   ‚ñà‚ñÄ‚ñÑ ‚ñà‚ñÄ‚ñÄ   ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñÄ‚ñÑ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ
{Fore.CYAN}‚ñà‚ñÑ‚ñÑ ‚ñà‚ñÑ‚ñà ‚ñà‚ñë‚ñÄ‚ñà ‚ñÑ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñë‚ñà‚ñë ‚ñà‚ñÄ‚ñà   ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñà‚ñÑ   ‚ñë‚ñà‚ñë ‚ñà‚ñÄ‚ñà ‚ñà‚ñë‚ñà ‚ñà‚ñÄ‚ñà ‚ñÑ‚ñà
{Fore.CYAN}{'=' * 70}{Style.RESET_ALL}
""")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning(f"{Fore.YELLOW}[!] Programa interrompido pelo usu√°rio{Style.RESET_ALL}")
        logger.info("[FIM] SCRIPT FINALIZADO MANUALMENTE")
